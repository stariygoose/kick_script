import { Telegraf, Context, Markup } from 'telegraf';
import { UserManager } from '../managers/user-manager.js';
import { Logger } from '../utils/logger.js';
import { UserConfig, StreamerConfig, BroadcastOptions, SendMessageResponse } from '../types/interfaces.js';
import { writeFileSync, readFileSync } from 'fs';

export class TelegramBot {
  private bot: Telegraf;
  private userManager: UserManager;
  private logger: Logger;
  private adminChatId: string;
  private accountsFilePath: string = './accounts.yml';
  private userStates: Map<string, string> = new Map();
  private broadcastOptions: BroadcastOptions = { concurrency: 5, delayMs: 200 };

  constructor(token: string, adminChatId: string, userManager: UserManager, logger: Logger) {
    this.bot = new Telegraf(token);
    this.userManager = userManager;
    this.logger = logger;
    this.adminChatId = adminChatId;

    this.setupCommands();
    this.setupCallbacks();
  }

  private setupCommands(): void {
    this.bot.start((ctx) => {
      if (!this.isAdmin(ctx)) return;
      this.showMainMenu(ctx);
    });

    // Keep command interface for backward compatibility
    this.bot.command('menu', (ctx) => this.showMainMenu(ctx));
    this.bot.command('adduser', (ctx) => this.handleAddUser(ctx));
    this.bot.command('removeuser', (ctx) => this.handleRemoveUser(ctx));
    this.bot.command('searchuser', (ctx) => this.handleSearchUser(ctx));
    this.bot.command('listusers', (ctx) => this.handleListUsers(ctx));
    this.bot.command('broadcast', (ctx) => this.handleBroadcast(ctx));
    this.bot.command('sendmsg', (ctx) => this.handleSendMessage(ctx));
    this.bot.command('reload', (ctx) => this.handleReload(ctx));
    this.bot.command('stats', (ctx) => this.handleStats(ctx));
    this.bot.command('setbroadcast', (ctx) => this.handleSetBroadcast(ctx));

    this.bot.catch((err: any, ctx) => {
      this.logger.error(`Bot error: ${err}`);
      if (this.isAdmin(ctx)) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message || err}`);
      }
    });

    // Handle regular text messages for states
    this.bot.on('text', (ctx) => this.handleTextInput(ctx));
  }

  private setupCallbacks(): void {
    this.bot.action('main_menu', (ctx) => {
      ctx.answerCbQuery();
      this.showMainMenu(ctx);
    });

    this.bot.action('users_menu', (ctx) => {
      ctx.answerCbQuery();
      this.showUsersMenu(ctx);
    });

    this.bot.action('streamers_menu', (ctx) => {
      ctx.answerCbQuery();
      this.showStreamersMenu(ctx);
    });

    this.bot.action('broadcast_menu', (ctx) => {
      ctx.answerCbQuery();
      this.showBroadcastMenu(ctx);
    });

    this.bot.action('files_menu', (ctx) => {
      ctx.answerCbQuery();
      this.showFilesMenu(ctx);
    });

    this.bot.action('add_user', (ctx) => {
      ctx.answerCbQuery();
      this.startAddUserProcess(ctx);
    });

    this.bot.action('remove_user', (ctx) => {
      ctx.answerCbQuery();
      this.startRemoveUserProcess(ctx);
    });

    this.bot.action('list_users', (ctx) => {
      ctx.answerCbQuery();
      this.handleListUsers(ctx);
    });

    this.bot.action('add_streamer', (ctx) => {
      ctx.answerCbQuery();
      this.startAddStreamerProcess(ctx);
    });

    this.bot.action('remove_streamer', (ctx) => {
      ctx.answerCbQuery();
      this.startRemoveStreamerProcess(ctx);
    });

    this.bot.action('list_streamers', (ctx) => {
      ctx.answerCbQuery();
      this.handleListStreamers(ctx);
    });

    this.bot.action('start_broadcast', (ctx) => {
      ctx.answerCbQuery();
      this.startBroadcastProcess(ctx);
    });

    this.bot.action('import_text', (ctx) => {
      ctx.answerCbQuery();
      this.startImportTextProcess(ctx);
    });

    this.bot.action('reload_accounts', (ctx) => {
      ctx.answerCbQuery();
      this.handleReload(ctx);
    });

    this.bot.action('show_stats', (ctx) => {
      ctx.answerCbQuery();
      this.handleStats(ctx);
    });

    this.bot.action('broadcast_settings', (ctx) => {
      ctx.answerCbQuery();
      this.showBroadcastSettings(ctx);
    });

    this.bot.action('set_fast', (ctx) => {
      ctx.answerCbQuery();
      this.setBroadcastPreset(ctx, { concurrency: 10, delayMs: 100 }, '–ë—ã—Å—Ç—Ä—ã–π');
    });

    this.bot.action('set_balanced', (ctx) => {
      ctx.answerCbQuery();
      this.setBroadcastPreset(ctx, { concurrency: 5, delayMs: 200 }, '–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π');
    });

    this.bot.action('set_safe', (ctx) => {
      ctx.answerCbQuery();
      this.setBroadcastPreset(ctx, { concurrency: 2, delayMs: 500 }, '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π');
    });
  }

  private isAdmin(ctx: Context): boolean {
    return true;
  }

  private async handleAddUser(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const message = ctx.message as any;
    const args = message?.text?.split(' ').slice(1);
    if (!args || args.length < 2) {
      ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /adduser <username> <token>');
      return;
    }

    const [username, token] = args;

    try {
      const userConfig: UserConfig = {
        username,
        accessToken: token
      };

      this.userManager.addUser(userConfig);
      await this.updateAccountsFile();

      ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω`);
      this.logger.info(`Added user ${username} via Telegram bot`);

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${error}`);
      this.logger.error(`Failed to add user ${username}: ${error}`);
    }
  }

  private async handleRemoveUser(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const msg = ctx.message as any;
    const args = msg?.text?.split(' ').slice(1);
    if (!args || args.length < 1) {
      ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /removeuser <username>');
      return;
    }

    const username = args[0];

    try {
      const removed = this.userManager.removeUser(username);

      if (removed) {
        await this.updateAccountsFile();
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–¥–∞–ª–µ–Ω`);
        this.logger.info(`Removed user ${username} via Telegram bot`);
      } else {
        ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
      this.logger.error(`Failed to remove user ${username}: ${error}`);
    }
  }

  private async handleSearchUser(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const searchMsg = ctx.message as any;
    const args = searchMsg?.text?.split(' ').slice(1);
    if (!args || args.length < 1) {
      ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /searchuser <username>');
      return;
    }

    const username = args[0];
    const sender = this.userManager.getSender(username);

    if (sender) {
      ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${username}`);
    } else {
      ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }

  private async handleListUsers(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const usernames = this.userManager.getAllUsernames();

    if (usernames.length === 0) {
      ctx.reply('üìã –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    const userList = usernames.map((username, index) => `${index + 1}. ${username}`).join('\n');
    ctx.reply(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${usernames.length}):\n\n${userList}`);
  }

  private async handleBroadcast(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const broadcastMsg = ctx.message as any;
    const args = broadcastMsg?.text?.split(' ').slice(1);
    if (!args || args.length < 2) {
      ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /broadcast <chatId> <message>');
      return;
    }

    const chatId = args[0];
    const message = args.slice(1).join(' ');

    try {
      const statusMessage = await ctx.reply('üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
      const startTime = Date.now();

      const result = await this.userManager.broadcastMessageConcurrent(chatId, message, this.broadcastOptions, (progress) => {
        const percentage = Math.round((progress.currentIndex / progress.totalUsers) * 100);
        const progressBar = this.createProgressBar(percentage);

        let statusText = `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n`;
        statusText += `${progressBar} ${percentage}%\n\n`;
        statusText += `üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${progress.currentUser}\n`;
        statusText += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentIndex}/${progress.totalUsers}\n`;
        statusText += `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${progress.sent}\n`;
        statusText += `‚ùå –û—à–∏–±–æ–∫: ${progress.failed}\n`;

        if (progress.streamerNickname) {
          statusText += `üé¨ –°—Ç—Ä–∏–º–µ—Ä: ${progress.streamerNickname}\n`;
        }

        if (progress.result && !progress.result.success) {
          statusText += `\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:\n${progress.result.error}\n`;
        }

        // Update status message
        ctx.telegram.editMessageText(
          ctx.chat?.id,
          statusMessage.message_id,
          undefined,
          statusText
        ).catch(() => {
          // Ignore telegram rate limit errors
        });
      });

      // Calculate execution time
      const endTime = Date.now();
      const executionTime = Math.round((endTime - startTime) / 1000);

      // Prepare detailed summary
      const total = result.sent + result.failed;
      const successRate = total > 0 ? Math.round((result.sent / total) * 100) : 0;
      
      let finalMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –ò–¢–û–ì–ò:\n`;
      finalMessage += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n`;
      finalMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n`;
      finalMessage += `‚ùå –û—à–∏–±–æ–∫: ${result.failed}\n`;
      finalMessage += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%\n`;
      finalMessage += `‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} —Å–µ–∫—É–Ω–¥\n`;

      // Add full error list if there were any failures
      if (result.failed > 0) {
        const failedResults = result.results.filter(r => !r.success);
        if (failedResults.length > 0) {
          finalMessage += `\nüîç –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –û–®–ò–ë–û–ö:\n`;
          
          failedResults.forEach((error: SendMessageResponse, index: number) => {
            const errorText = error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            finalMessage += `${index + 1}. ${errorText}\n`;
          });
        }
      }

      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        statusMessage.message_id,
        undefined,
        finalMessage
      );

      this.logger.info(`Broadcast completed via Telegram bot: ${result.sent} sent, ${result.failed} failed`);

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error}`);
      this.logger.error(`Broadcast failed via Telegram bot: ${error}`);
    }
  }

  private async handleSendMessage(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const sendMsg = ctx.message as any;
    const args = sendMsg?.text?.split(' ').slice(1);
    if (!args || args.length < 3) {
      ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /sendmsg <username> <chatId> <message>');
      return;
    }

    const username = args[0];
    const chatId = args[1];
    const message = args.slice(2).join(' ');

    try {
      const result = await this.userManager.sendMessageFromUser(username, chatId, message);

      if (result.success) {
        ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${username}`);
        this.logger.info(`Message sent from ${username} via Telegram bot`);
      } else {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç ${username}: ${result.error}`);
      }

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      this.logger.error(`Failed to send message from ${username} via Telegram bot: ${error}`);
    }
  }

  private async handleReload(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    try {
      await this.userManager.loadAccountsFromFile(this.accountsFilePath);
      const count = this.userManager.getUserCount();

      ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${count}`);
      this.logger.info(`Accounts reloaded via Telegram bot: ${count} accounts`);

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${error}`);
      this.logger.error(`Failed to reload accounts via Telegram bot: ${error}`);
    }
  }

  private async handleStats(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const userCount = this.userManager.getUserCount();
    const streamersCount = this.userManager.getAllStreamerNicknames().length;

    // Calculate estimated broadcast time
    const estimatedTime = Math.ceil(userCount / (this.broadcastOptions.concurrency || 1)) * ((this.broadcastOptions.delayMs || 0) / 1000);

    ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${userCount}
üé¨ –í—Å–µ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: ${streamersCount}
üìù –§–∞–π–ª: ${this.accountsFilePath}
ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ‚úÖ

‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:
üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${this.broadcastOptions.concurrency}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${this.broadcastOptions.delayMs}ms
üìà –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ~${estimatedTime}—Å`);
  }

  private async handleSetBroadcast(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const msg = ctx.message as any;
    const args = msg?.text?.split(' ').slice(1);
    if (!args || args.length < 2) {
      ctx.reply(`‚ùå –§–æ—Ä–º–∞—Ç: /setbroadcast <concurrency> <delayMs>

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${this.broadcastOptions.concurrency}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${this.broadcastOptions.delayMs}ms

–ü—Ä–∏–º–µ—Ä: /setbroadcast 3 300`);
      return;
    }

    const concurrency = parseInt(args[0]);
    const delayMs = parseInt(args[1]);

    if (isNaN(concurrency) || isNaN(delayMs) || concurrency < 1 || concurrency > 10 || delayMs < 0) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!\n–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: 1-10\n–ó–∞–¥–µ—Ä–∂–∫–∞: >= 0');
      return;
    }

    this.broadcastOptions = { concurrency, delayMs };

    // Calculate new estimated time
    const userCount = this.userManager.getUserCount();
    const estimatedTime = Math.ceil(userCount / concurrency) * (delayMs / 1000);

    ctx.reply(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!
üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${concurrency}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${delayMs}ms
üìà –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ~${estimatedTime}—Å`);

    this.logger.info(`Broadcast settings updated: concurrency=${concurrency}, delay=${delayMs}ms`);
  }

  private async updateAccountsFile(): Promise<void> {
    try {
      // Export current state to the watched file
      this.userManager.exportToYaml(this.accountsFilePath);
      this.logger.info(`Updated accounts file: ${this.accountsFilePath}`);
    } catch (error) {
      this.logger.error(`Failed to update accounts file: ${error}`);
      throw error;
    }
  }

  public async start(): Promise<void> {
    try {
      await this.bot.launch();
      this.logger.info('Telegram bot started successfully');
      console.log('ü§ñ Telegram bot is running...');
    } catch (error) {
      this.logger.error(`Failed to start Telegram bot: ${error}`);
      throw error;
    }
  }

  private showMainMenu(ctx: Context): void {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'users_menu')],
      [Markup.button.callback('üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞–º–∏', 'streamers_menu')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', 'broadcast_menu')],
      [Markup.button.callback('‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏', 'broadcast_settings')],
      [Markup.button.callback('üìÅ –§–∞–π–ª—ã', 'files_menu')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')],
    ]);

    const message = `ü§ñ Kick Bot Manager

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    if (ctx.callbackQuery) {
      ctx.editMessageText(message, keyboard);
    } else {
      ctx.reply(message, keyboard);
    }
  }

  private showUsersMenu(ctx: Context): void {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'add_user')],
      [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'remove_user')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'list_users')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')],
    ]);

    const message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.userManager.getUserCount()}`;

    ctx.editMessageText(message, keyboard);
  }

  private showStreamersMenu(ctx: Context): void {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞', 'add_streamer')],
      [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞', 'remove_streamer')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤', 'list_streamers')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')],
    ]);

    const message = `üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞–º–∏

–í—Å–µ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: ${this.userManager.getAllStreamerNicknames().length}`;

    ctx.editMessageText(message, keyboard);
  }

  private showBroadcastMenu(ctx: Context): void {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'start_broadcast')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')],
    ]);

    const message = `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.userManager.getUserCount()}`;

    ctx.editMessageText(message, keyboard);
  }

  private showFilesMenu(ctx: Context): void {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì• –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞', 'import_text')],
      [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', 'reload_accounts')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')],
    ]);

    const message = `üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏

–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${this.accountsFilePath}`;

    ctx.editMessageText(message, keyboard);
  }

  private showBroadcastSettings(ctx: Context): void {
    const userCount = this.userManager.getUserCount();
    const estimatedTime = Math.ceil(userCount / (this.broadcastOptions.concurrency || 1)) * ((this.broadcastOptions.delayMs || 0) / 1000);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ö° –ë—ã—Å—Ç—Ä–æ (10 –ø–æ—Ç–æ–∫–æ–≤, 100ms)', 'set_fast')],
      [Markup.button.callback('‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ (5 –ø–æ—Ç–æ–∫–æ–≤, 200ms)', 'set_balanced')],
      [Markup.button.callback('üêå –ë–µ–∑–æ–ø–∞—Å–Ω–æ (2 –ø–æ—Ç–æ–∫–∞, 500ms)', 'set_safe')],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu')],
    ]);

    const message = `‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏

–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${this.broadcastOptions.concurrency}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${this.broadcastOptions.delayMs}ms
üìà –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ ${userCount} —Å–æ–æ–±—â–µ–Ω–∏–π: ~${estimatedTime}—Å

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setbroadcast <–ø–æ—Ç–æ–∫–∏> <–∑–∞–¥–µ—Ä–∂–∫–∞>:`;

    ctx.editMessageText(message, keyboard);
  }

  private setBroadcastPreset(ctx: Context, options: BroadcastOptions, presetName: string): void {
    this.broadcastOptions = options;

    const userCount = this.userManager.getUserCount();
    const estimatedTime = Math.ceil(userCount / (options.concurrency || 1)) * ((options.delayMs || 0) / 1000);

    ctx.reply(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç "${presetName}"!
üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${options.concurrency}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${options.delayMs}ms
üìà –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ~${estimatedTime}—Å`);

    this.logger.info(`Broadcast preset "${presetName}" applied: concurrency=${options.concurrency}, delay=${options.delayMs}ms`);

    // Show updated settings
    setTimeout(() => this.showBroadcastSettings(ctx), 2000);
  }

  private startAddUserProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_user_data');
    ctx.editMessageText('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nusername token');
  }

  private startRemoveUserProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_username_to_remove');
    ctx.editMessageText('‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
  }

  private startAddStreamerProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_streamer_data');
    ctx.editMessageText('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nnickname chatId');
  }

  private startRemoveStreamerProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_streamer_to_remove');
    ctx.editMessageText('‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ nickname —Å—Ç—Ä–∏–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
  }

  private startBroadcastProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_broadcast_data');
    ctx.editMessageText('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nchatId message');
  }

  private startImportTextProcess(ctx: Context): void {
    const userId = this.getUserId(ctx);
    this.userStates.set(userId, 'waiting_import_text');
    ctx.editMessageText('üì• –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞\n\n–í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nusername=userId|token');
  }

  private async handleTextInput(ctx: Context): Promise<void> {
    if (!this.isAdmin(ctx)) return;

    const userId = this.getUserId(ctx);
    const state = this.userStates.get(userId);
    const message = ctx.message as any;
    const text = message?.text;

    if (!state || !text) return;

    this.userStates.delete(userId);

    switch (state) {
      case 'waiting_user_data':
        await this.processAddUser(ctx, text);
        break;
      case 'waiting_username_to_remove':
        await this.processRemoveUser(ctx, text);
        break;
      case 'waiting_streamer_data':
        await this.processAddStreamer(ctx, text);
        break;
      case 'waiting_streamer_to_remove':
        await this.processRemoveStreamer(ctx, text);
        break;
      case 'waiting_broadcast_data':
        await this.processBroadcast(ctx, text);
        break;
      case 'waiting_import_text':
        await this.processImportText(ctx, text);
        break;
    }
  }

  private async processAddUser(ctx: Context, input: string): Promise<void> {
    const parts = input.trim().split(' ');
    if (parts.length < 2) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: username token');
      return;
    }

    const [username, token] = parts;
    try {
      const userConfig: UserConfig = { username, accessToken: token };
      this.userManager.addUser(userConfig);
      await this.updateAccountsFile();
      ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω`, this.getBackToMenuKeyboard());
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private async processRemoveUser(ctx: Context, username: string): Promise<void> {
    try {
      const removed = this.userManager.removeUser(username.trim());
      if (removed) {
        await this.updateAccountsFile();
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–¥–∞–ª–µ–Ω`, this.getBackToMenuKeyboard());
      } else {
        ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, this.getBackToMenuKeyboard());
      }
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private async processAddStreamer(ctx: Context, input: string): Promise<void> {
    const parts = input.trim().split(' ');
    if (parts.length < 2) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: nickname chatId');
      return;
    }

    const [nickname, chatId] = parts;
    try {
      const streamerConfig: StreamerConfig = { nickname, chatId };
      this.userManager.addStreamer(nickname, streamerConfig);
      await this.updateAccountsFile();
      ctx.reply(`‚úÖ –°—Ç—Ä–∏–º–µ—Ä ${nickname} –¥–æ–±–∞–≤–ª–µ–Ω`, this.getBackToMenuKeyboard());
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private async processRemoveStreamer(ctx: Context, nickname: string): Promise<void> {
    try {
      const trimmedNickname = nickname.trim();
      const streamer = this.userManager.getStreamer(trimmedNickname);
      
      if (!streamer) {
        ctx.reply(`‚ùå –°—Ç—Ä–∏–º–µ—Ä ${trimmedNickname} –Ω–µ –Ω–∞–π–¥–µ–Ω`, this.getBackToMenuKeyboard());
        return;
      }

      this.userManager.removeStreamer(trimmedNickname);
      await this.updateAccountsFile();
      ctx.reply(`‚úÖ –°—Ç—Ä–∏–º–µ—Ä ${trimmedNickname} —É–¥–∞–ª–µ–Ω`, this.getBackToMenuKeyboard());
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private async processBroadcast(ctx: Context, input: string): Promise<void> {
    const parts = input.trim().split(' ');
    if (parts.length < 2) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: chatId message');
      return;
    }

    const chatId = parts[0];
    const message = parts.slice(1).join(' ');

    try {
      const statusMessage = await ctx.reply('üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
      const startTime = Date.now();

      const result = await this.userManager.broadcastMessageConcurrent(chatId, message, this.broadcastOptions, (progress) => {
        const percentage = Math.round((progress.currentIndex / progress.totalUsers) * 100);
        const progressBar = this.createProgressBar(percentage);

        let statusText = `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n`;
        statusText += `${progressBar} ${percentage}%\n\n`;
        statusText += `üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${progress.currentUser}\n`;
        statusText += `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentIndex}/${progress.totalUsers}\n`;
        statusText += `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${progress.sent}\n`;
        statusText += `‚ùå –û—à–∏–±–æ–∫: ${progress.failed}\n`;

        if (progress.streamerNickname) {
          statusText += `üé¨ –°—Ç—Ä–∏–º–µ—Ä: ${progress.streamerNickname}\n`;
        }

        if (progress.result && !progress.result.success) {
          statusText += `\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:\n${progress.result.error}\n`;
        }

        // Update status message
        ctx.telegram.editMessageText(
          ctx.chat?.id,
          statusMessage.message_id,
          undefined,
          statusText
        ).catch(() => {
          // Ignore telegram rate limit errors
        });
      });

      // Calculate execution time
      const endTime = Date.now();
      const executionTime = Math.round((endTime - startTime) / 1000);

      // Prepare detailed summary
      const total = result.sent + result.failed;
      const successRate = total > 0 ? Math.round((result.sent / total) * 100) : 0;
      
      let finalMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –ò–¢–û–ì–ò:\n`;
      finalMessage += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n`;
      finalMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n`;
      finalMessage += `‚ùå –û—à–∏–±–æ–∫: ${result.failed}\n`;
      finalMessage += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%\n`;
      finalMessage += `‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} —Å–µ–∫—É–Ω–¥\n`;

      // Add full error list if there were any failures
      if (result.failed > 0) {
        const failedResults = result.results.filter(r => !r.success);
        if (failedResults.length > 0) {
          finalMessage += `\nüîç –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –û–®–ò–ë–û–ö:\n`;
          
          failedResults.forEach((error: SendMessageResponse, index: number) => {
            const errorText = error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            finalMessage += `${index + 1}. ${errorText}\n`;
          });
        }
      }

      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        statusMessage.message_id,
        undefined,
        finalMessage,
        this.getBackToMenuKeyboard()
      );

    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private async processImportText(ctx: Context, textContent: string): Promise<void> {
    try {
      // Import from text content and overwrite YAML file
      this.userManager.importFromTextAndOverwriteYaml(textContent.trim(), this.accountsFilePath);
      
      // Get the count of imported users
      const userCount = this.userManager.getUserCount();
      
      ctx.reply(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}\nüîÑ YAML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${this.accountsFilePath}`, this.getBackToMenuKeyboard());
      
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error}`, this.getBackToMenuKeyboard());
    }
  }

  private createProgressBar(percentage: number): string {
    const totalBars = 10;
    const filledBars = Math.round((percentage / 100) * totalBars);
    const emptyBars = totalBars - filledBars;

    return '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);
  }

  private handleListStreamers(ctx: Context): void {
    const streamers = this.userManager.getAllStreamerNicknames();

    if (streamers.length === 0) {
      ctx.reply('üìã –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤', this.getBackToMenuKeyboard());
      return;
    }

    const streamerList = streamers.map((nickname, index) => {
      const streamer = this.userManager.getStreamer(nickname);
      return `${index + 1}. ${nickname} (${streamer?.chatId})`;
    }).join('\n');

    ctx.reply(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ (${streamers.length}):\n\n${streamerList}`, this.getBackToMenuKeyboard());
  }


  private getBackToMenuKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
  }

  private getUserId(ctx: Context): string {
    return ctx.from?.id.toString() || 'unknown';
  }


  public stop(): void {
    this.bot.stop();
    this.logger.info('Telegram bot stopped');
  }
}